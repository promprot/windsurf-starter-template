name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Weekly security updates check (Sunday at midnight)
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Default environment variables
env:
  PYTHON_VERSION: '3.9'
  SECURITY_SCAN_FAIL_ON_ISSUES: 'true'

# Job to cancel previous runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Needed for TruffleHog to scan commit history
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
    
    - name: Lint with various tools
      run: |
        echo "Installing linting tools..."
        pip install black==23.12.1 isort==5.13.2 flake8==7.0.0 mypy==1.8.0
        
        echo "\n=== Running Black ==="
        black --check .
        
        echo "\n=== Running isort ==="
        isort --check-only .
        
        echo "\n=== Running flake8 ==="
        flake8 .
        
        echo "\n=== Running mypy ==="
        mypy .
    
    - name: Run tests with pytest
      if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs && github.event.inputs.skip_tests == 'true') }}
      run: |
        pip install pytest pytest-cov pytest-asyncio pytest-mock
        pytest --cov=src --cov-report=xml --cov-report=term-missing tests/
    
    - name: Set up Codecov environment
      if: github.event_name != 'workflow_dispatch' || !github.event.inputs || github.event.inputs.skip_tests != 'true'
      id: codecov_setup
      env:
        HAS_CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN != '' }}
      run: |
        if [ "$HAS_CODECOV_TOKEN" = "true" ]; then
          echo "token_available=true" >> $GITHUB_OUTPUT
        else
          echo "token_available=false" >> $GITHUB_OUTPUT
          echo "::warning::CODECOV_TOKEN not set. Skipping code coverage upload."
        fi
    
    - name: Upload coverage to Codecov
      if: steps.codecov_setup.outputs.token_available == 'true' && (github.event_name != 'workflow_dispatch' || !github.event.inputs || github.event.inputs.skip_tests != 'true')
      uses: codecov/codecov-action@v3
      continue-on-error: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test  # Run after tests pass
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Needed for TruffleHog to scan commit history
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit trufflehog
    
    - name: Set up Safety environment
      id: safety_setup
      env:
        HAS_SAFETY_KEY: ${{ secrets.SAFETY_API_KEY != '' }}
      run: |
        if [ "$HAS_SAFETY_KEY" = "true" ]; then
          echo "key_available=true" >> $GITHUB_OUTPUT
        else
          echo "key_available=false" >> $GITHUB_OUTPUT
        fi

    - name: Check for Python vulnerabilities with Safety (authenticated)
      if: steps.safety_setup.outputs.key_available == 'true'
      continue-on-error: ${{ env.SECURITY_SCAN_FAIL_ON_ISSUES != 'true' }}
      env:
        SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
      run: |
        echo "Using authenticated Safety check"
        safety check --key="$SAFETY_API_KEY" --full-report --output text

    - name: Check for Python vulnerabilities with Safety (basic)
      if: steps.safety_setup.outputs.key_available != 'true' && steps.safety_setup.outputs.key_available != ''
      continue-on-error: ${{ env.SECURITY_SCAN_FAIL_ON_ISSUES != 'true' }}
      run: |
        echo "SAFETY_API_KEY not set, running in basic mode (limited to local vulnerability database)"
        safety check --ignore=51457  # Ignore known false positives
    
    - name: Run Bandit security linter
      continue-on-error: ${{ env.SECURITY_SCAN_FAIL_ON_ISSUES != 'true' }}
      run: |
        echo "Running Bandit security linter..."
        bandit -r src/ -x tests/ -ll -iii
    
    - name: Scan for secrets with TruffleHog
      continue-on-error: ${{ env.SECURITY_SCAN_FAIL_ON_ISSUES != 'true' }}
      run: |
        echo "Scanning for secrets with TruffleHog..."
        # Scan only the last 50 commits to balance thoroughness and speed
        # Ignore test files and known false positives
        trufflehog --max_depth 50 --entropy=False --regex --exclude_paths=tests/,.git/ . || \
          echo "::warning::TruffleHog found potential secrets. Review the logs above."
    
    - name: Check for dependency updates with pip-audit
      continue-on-error: true  # Don't fail the build for outdated deps
      run: |
        echo "Checking for vulnerable dependencies with pip-audit..."
        pip install pip-audit
        pip-audit --desc -r requirements.txt -r requirements-dev.txt || \
          echo "::warning::pip-audit found vulnerabilities. Consider updating your dependencies."

  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'  # Only run on schedule
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Check for outdated dependencies
      id: deps
      run: |
        pip install pip-tools
        pip list --outdated --format=json > outdated.json
        echo "OUTDATED_DEPS=$(jq -r '.[].name' outdated.json | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Issue for Updates
      if: steps.deps.outputs.OUTDATED_DEPS != '[]'
      uses: peter-evans/create-issue-from-file@v4
      with:
        title: 'Dependency Updates Available'
        content-filepath: .github/ISSUE_TEMPLATE/dependency-update.md
        assignees: ${{ github.actor }}
        labels: dependencies,automated
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OUTDATED_DEPS: ${{ steps.deps.outputs.OUTDATED_DEPS }}
